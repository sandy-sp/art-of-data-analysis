name: Publish Docker Images

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.find-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find projects with Dockerfiles
        id: find-projects
        run: |
          PROJECTS=$(find projects -mindepth 1 -maxdepth 1 -type d -exec test -f "{}/Dockerfile" \; -print)
          if [ -z "$PROJECTS" ]; then
              echo "No Docker projects found."
              echo "projects=[]" >> "$GITHUB_OUTPUT"
          else
              PROJECTS_JSON=$(echo "$PROJECTS" | jq -R -s -c 'split("\n")[:-1]')
              echo "projects=$PROJECTS_JSON" >> "$GITHUB_OUTPUT"
          fi    

  build-and-push:
    needs: publish
    if: needs.publish.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.publish.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check contents
        run: |
          echo "== Contents of ${{ matrix.project }} =="
          ls -la "${{ matrix.project }}"

      - name: Build and push Docker images
        run: |
          set -e
          PROJECT="${{ matrix.project }}"
          PROJECT_NAME=$(basename "$PROJECT")
          TAG="${GITHUB_SHA::7}"

          IMAGE_NAME_DOCKERHUB="${{ secrets.DOCKERHUB_USERNAME }}/${PROJECT_NAME}:${TAG}"
          IMAGE_NAME_GHCR="ghcr.io/${{ github.repository_owner }}/${PROJECT_NAME}:${TAG}"

          echo "Building Docker image: $IMAGE_NAME_DOCKERHUB"
          docker build -t "$IMAGE_NAME_DOCKERHUB" "$PROJECT"

          echo "Pushing to Docker Hub"
          docker push "$IMAGE_NAME_DOCKERHUB"

          echo "Tagging and pushing to GHCR"
          docker tag "$IMAGE_NAME_DOCKERHUB" "$IMAGE_NAME_GHCR"
          docker push "$IMAGE_NAME_GHCR"
